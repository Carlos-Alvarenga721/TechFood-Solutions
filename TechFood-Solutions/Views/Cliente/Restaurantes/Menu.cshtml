@model TechFood_Solutions.Models.Restaurant

@{
    ViewData["Title"] = $"{Model.Nombre} - Menú";
    @inject TechFood_Solutions.Services.ICartService CartService
}

<style>
    .menu-page {
        padding: 20px 0;
        background-color: #f8f9fa;
        min-height: calc(100vh - 200px);
    }

    .menu-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
    }

    .restaurant-header {
        background: white;
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        display: flex;
        align-items: center;
        gap: 30px;
    }

    .restaurant-logo {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        border: 5px solid #f0f0f0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .restaurant-info {
        flex: 1;
    }

        .restaurant-info h1 {
            font-size: 2.5rem;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .restaurant-info p {
            color: #7f8c8d;
            font-size: 1.1rem;
            line-height: 1.6;
        }

    .rating {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 15px;
    }

    .stars {
        color: #f39c12;
        font-size: 1.3rem;
    }

    .review-count {
        color: #95a5a6;
        font-size: 1rem;
    }

    .favorite-btn {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: #e74c3c;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        transition: transform 0.2s;
    }

        .favorite-btn:hover {
            transform: scale(1.1);
        }

    .menu-section {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
    }

    .menu-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .menu-title {
        font-size: 1.8rem;
        color: #2c3e50;
        font-weight: bold;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .menu-title::before {
            content: '';
            width: 5px;
            height: 30px;
            background: #e74c3c;
            border-radius: 5px;
        }

    .menu-subtitle {
        color: #7f8c8d;
        font-size: 1.2rem;
        margin-bottom: 30px;
    }

    .navigation-arrows {
        display: flex;
        gap: 10px;
    }

    .arrow-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: 2px solid #e0e0e0;
        background: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        color: #7f8c8d;
        transition: all 0.3s;
    }

        .arrow-btn:hover {
            border-color: #e74c3c;
            color: #e74c3c;
            background: #fff5f5;
        }

    .menu-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 25px;
        margin-bottom: 30px;
    }

    .menu-item {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 15px;
        transition: transform 0.3s, box-shadow 0.3s;
        cursor: pointer;
        position: relative;
    }

        .menu-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        }

    .item-image-container {
        position: relative;
        border-radius: 12px;
        overflow: hidden;
        margin-bottom: 15px;
        background: white;
        height: 180px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .item-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .image-placeholder {
        color: #6c757d;
        font-size: 3rem;
        opacity: 0.3;
    }

    .item-actions {
        position: absolute;
        top: 10px;
        right: 10px;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .action-icon {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        background: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        transition: all 0.3s;
    }

        .action-icon:hover {
            transform: scale(1.1);
        }

        .action-icon.heart {
            color: #e74c3c;
        }

        .action-icon.eye {
            color: #3498db;
        }

    .item-info {
        padding: 5px;
    }

    .item-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
    }

    .item-price {
        color: #e74c3c;
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 8px;
    }

    .item-rating {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 10px;
    }

    .item-stars {
        color: #f39c12;
        font-size: 0.9rem;
    }

    .item-reviews {
        color: #95a5a6;
        font-size: 0.85rem;
    }

    .add-to-cart-btn {
        width: 100%;
        padding: 10px 15px;
        background: #e74c3c;
        border: none;
        border-radius: 8px;
        color: white;
        font-size: 0.95rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        box-shadow: 0 2px 8px rgba(231, 76, 60, 0.3);
    }

        .add-to-cart-btn:hover {
            background: #c0392b;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(231, 76, 60, 0.4);
        }

        .add-to-cart-btn:active {
            transform: translateY(0);
        }

        .add-to-cart-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

    .cart-icon {
        font-size: 1.1rem;
    }

    .view-all-container {
        text-align: center;
        margin-top: 30px;
    }

    .view-all-btn {
        background: #e74c3c;
        color: white;
        border: none;
        padding: 15px 50px;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
    }

        .view-all-btn:hover {
            background: #c0392b;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
        }

    /* Badge de cantidad en el producto */
    .product-badge {
        position: absolute;
        top: -8px;
        left: -8px;
        background: #e74c3c;
        color: white;
        border: 2px solid white;
        border-radius: 50%;
        width: 28px;
        height: 28px;
        font-size: 0.85rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
        box-shadow: 0 2px 8px rgba(231, 76, 60, 0.3);
        animation: popIn 0.3s ease;
    }


    /* Modal */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        animation: fadeIn 0.3s ease;
    }

    .modal-content {
        background: white;
        padding: 30px 40px;
        border-radius: 12px;
        text-align: center;
        max-width: 450px;
        box-shadow: 0 0 30px rgba(0,0,0,0.3);
        animation: slideUp 0.3s ease;
    }


    .modal-content p {
        font-size: 1.1rem;
        color: #2c3e50;
        line-height: 1.6;
        margin-bottom: 0;
    }

    .modal-buttons {
        margin-top: 25px;
        display: flex;
        justify-content: center;
        gap: 15px;
    }

        .modal-buttons button {
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }

    .btn-danger {
        background-color: #e74c3c;
        color: white;
        box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
    }

        .btn-danger:hover {
            background-color: #c0392b;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
        }

    .btn-secondary {
        background-color: #95a5a6;
        color: white;
        box-shadow: 0 4px 15px rgba(149, 165, 166, 0.3);
    }

        .btn-secondary:hover {
            background-color: #7f8c8d;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(149, 165, 166, 0.4);
        }

    /* Notificaciones Toast */
    .notification-toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        z-index: 9999;
        transform: translateX(400px);
        transition: transform 0.3s ease;
        font-size: 1rem;
        min-width: 300px;
    }

        .notification-toast.show {
            transform: translateX(0);
        }

    .notification-success {
        background: #27ae60;
        color: white;
    }

    .notification-error {
        background: #e74c3c;
        color: white;
    }

    .notification-content {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .notification-icon {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .notification-message {
        flex: 1;
    }


</style>

<div class="menu-page">
    <div class="menu-container">
        <!-- Header del restaurante -->
        <div class="restaurant-header">
            <img src="~/images/restaurantes/@Model.LogoUrl"
                 alt="@Model.Nombre"
                 class="restaurant-logo"
                 onerror="this.src='/images/default-restaurant.png';">
            <div class="restaurant-info">
                <h1>@Model.Nombre</h1>
                <p>@Model.Descripcion</p>
                <div class="rating">
                    <span class="stars">★★★★☆</span>
                    <span class="review-count">(95)</span>
                </div>
            </div>
            <button class="favorite-btn">♥</button>
        </div>

        <!-- Sección del menú -->
        <div class="menu-section">
            <div class="menu-header">
                <div>
                    <h2 class="menu-title">Menu</h2>
                    <p class="menu-subtitle">¿Qué quieres comer hoy?</p>
                </div>
                <div class="navigation-arrows">
                    <button class="arrow-btn">←</button>
                    <button class="arrow-btn">→</button>
                </div>
            </div>

            <!-- Grid de productos -->
            <div class="menu-grid">
                @foreach (var item in Model.MenuItems)
                {
                    var cartItemCount = CartService.GetItemQuantity(item.Id);

                    <div class="menu-item" data-menu-item-id="@item.Id">
                        @if (cartItemCount > 0)
                        {
                            <span class="product-badge">@cartItemCount</span>
                        }

                        <div class="item-image-container">
                            @if (!string.IsNullOrEmpty(item.ImagenUrl))
                            {
                                <img src="~/images/items/restaurant_@(Model.Id)/@item.ImagenUrl"
                                     alt="@item.Nombre"
                                     class="item-image"
                                     onerror="this.style.display='none'; this.parentElement.innerHTML='<div class=&quot;image-placeholder&quot;>🍽️</div>';">
                            }
                            else
                            {
                                <div class="image-placeholder">🍽️</div>
                            }
                            <div class="item-actions">
                                <button class="action-icon heart">♥</button>
                            </div>
                        </div>

                        <div class="item-info">
                            <h3 class="item-name">@item.Nombre</h3>
                            <div class="item-price">$@item.Precio.ToString("F2")</div>
                            <div class="item-rating">
                                <span class="item-stars">★★★★★</span>
                                <span class="item-reviews">(65)</span>
                            </div>
                            <button type="button"
                                    class="add-to-cart-btn"
                                    data-menu-item-id="@item.Id">
                                <span class="cart-icon">🛒</span> Agregar
                            </button>
                        </div>
                    </div>
                }
            </div>

            <!-- Mensaje si no hay items -->
            @if (!Model.MenuItems.Any())
            {
                <div style="text-align: center; padding: 60px 20px; color: #6c757d;">
                    <div style="font-size: 4rem; margin-bottom: 20px; opacity: 0.3;">🍽️</div>
                    <h3 style="color: #2c3e50; margin-bottom: 10px;">Menú en construcción</h3>
                    <p style="font-size: 1.1rem;">Este restaurante está preparando deliciosos productos para ti.</p>
                </div>
            }

            <!-- Botón Ver Todos -->
            @if (Model.MenuItems.Count() > 8)
            {
                <div class="view-all-container">
                    <button class="view-all-btn">Ver todos los productos (@Model.MenuItems.Count())</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal para confirmar cambio de restaurante -->
<div id="confirmModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
        <p id="modalMessage">
            Ya tienes productos de otro restaurante en tu carrito.<br>
            ¿Deseas vaciar el carrito y comenzar una nueva orden con este restaurante?
        </p>
        <div class="modal-buttons">
            <button id="modalConfirmBtn" class="btn btn-danger">Sí, vaciar carrito</button>
            <button id="modalCancelBtn" class="btn btn-secondary">Cancelar</button>
        </div>
    </div>
</div>

@section Scripts {
    @Html.AntiForgeryToken()

    <script>
        // ====== FUNCIÓN: OBTENER TOKEN ANTIFORGERY ======
        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
        }

        // ====== AGREGAR AL CARRITO CON VALIDACIÓN DE LOGIN ======
        document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const menuItemId = this.dataset.menuItemId;
                const cantidad = 1;

                // Guardar estado del botón
                this.disabled = true;
                const originalText = this.innerHTML;
                this.innerHTML = '<span class="cart-icon">⏳</span> Agregando...';

                try {
                    const response = await fetch('/Cart/AddToCartAjax', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: `menuItemId=${menuItemId}&cantidad=${cantidad}`
                    });

                    const result = await response.json();

                    // ✅ SI REQUIERE LOGIN, REDIRIGIR
                    if (result.requiresLogin) {
                        const currentUrl = window.location.pathname + window.location.search;
                        window.location.href = `/Account/Login?returnUrl=${encodeURIComponent(currentUrl)}`;
                        return;
                    }

                    // Si necesita limpiar el carrito (otro restaurante)
                    if (result.requiresClear) {
                        mostrarModalConfirmacion(result.message, async () => {
                            await clearAndAddToCart(menuItemId, cantidad, this, originalText);
                        }, () => {
                            this.disabled = false;
                            this.innerHTML = originalText;
                        });
                        return;
                    }

                    // Éxito
                    if (result.success) {
                        showNotification('success', result.message);
                        actualizarBadgeGlobal(result.totalItems);
                        actualizarBadgeProducto(menuItemId, result.itemQuantity);

                        this.innerHTML = '<span class="cart-icon">✓</span> Agregado';
                        this.style.background = '#27ae60';

                        setTimeout(() => {
                            this.innerHTML = originalText;
                            this.style.background = '';
                            this.disabled = false;
                        }, 2000);
                    } else {
                        showNotification('error', result.message);
                        this.disabled = false;
                        this.innerHTML = originalText;
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('error', 'Error al agregar al carrito');
                    this.disabled = false;
                    this.innerHTML = originalText;
                }
            });
        });

        // ====== FUNCIÓN: LIMPIAR Y AGREGAR ======
        async function clearAndAddToCart(menuItemId, cantidad, button, originalText) {
            try {
                const response = await fetch('/Cart/ClearAndAdd', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: `menuItemId=${menuItemId}&cantidad=${cantidad}`
                });

                const result = await response.json();

                if (result.requiresLogin) {
                    const currentUrl = window.location.pathname + window.location.search;
                    window.location.href = `/Account/Login?returnUrl=${encodeURIComponent(currentUrl)}`;
                    return;
                }

                if (result.success) {
                    showNotification('success', result.message);
                    actualizarBadgeGlobal(result.totalItems);
                    actualizarBadgeProducto(menuItemId, result.itemQuantity);

                    // Limpiar badges de otros productos
                    document.querySelectorAll('.product-badge').forEach(badge => {
                        const item = badge.closest('.menu-item');
                        if (item && item.dataset.menuItemId !== menuItemId.toString()) {
                            badge.style.display = 'none';
                        }
                    });

                    button.innerHTML = '<span class="cart-icon">✓</span> Agregado';
                    button.style.background = '#27ae60';

                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.style.background = '';
                        button.disabled = false;
                    }, 2000);
                } else {
                    showNotification('error', result.message);
                    button.disabled = false;
                    button.innerHTML = originalText;
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('error', 'Error al procesar la solicitud');
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }

        // ====== FUNCIÓN: ACTUALIZAR BADGE GLOBAL DEL CARRITO ======
        function actualizarBadgeGlobal(totalItems) {
            const badge = document.querySelector('.cart-badge');
            if (badge) {
                if (totalItems > 0) {
                    badge.textContent = totalItems;
                    badge.style.display = 'flex';
                    badge.style.transform = 'scale(1.3)';
                    setTimeout(() => {
                        badge.style.transform = 'scale(1)';
                    }, 200);
                } else {
                    badge.style.display = 'none';
                }
            }
        }

        // ====== FUNCIÓN: ACTUALIZAR BADGE DEL PRODUCTO ======
        function actualizarBadgeProducto(menuItemId, cantidad) {
            const container = document.querySelector(`.menu-item[data-menu-item-id="${menuItemId}"]`);
            if (!container) return;

            let badge = container.querySelector('.product-badge');

            if (!badge) {
                badge = document.createElement('span');
                badge.classList.add('product-badge');
                container.appendChild(badge);
            }

            if (cantidad > 0) {
                badge.textContent = cantidad;
                badge.style.display = 'flex';
            } else {
                badge.style.display = 'none';
            }
        }

        // ====== FUNCIÓN: MOSTRAR MODAL DE CONFIRMACIÓN ======
        function mostrarModalConfirmacion(mensaje, onConfirm, onCancel) {
            const modal = document.getElementById('confirmModal');
            const message = document.getElementById('modalMessage');
            const confirmBtn = document.getElementById('modalConfirmBtn');
            const cancelBtn = document.getElementById('modalCancelBtn');

            message.innerHTML = mensaje;
            modal.style.display = 'flex';

            const confirmHandler = () => {
                modal.style.display = 'none';
                confirmBtn.removeEventListener('click', confirmHandler);
                cancelBtn.removeEventListener('click', cancelHandler);
                modal.removeEventListener('click', outsideClickHandler);
                onConfirm();
            };

            const cancelHandler = () => {
                modal.style.display = 'none';
                confirmBtn.removeEventListener('click', confirmHandler);
                cancelBtn.removeEventListener('click', cancelHandler);
                modal.removeEventListener('click', outsideClickHandler);
                if (onCancel) onCancel();
            };

            const outsideClickHandler = (e) => {
                if (e.target === modal) {
                    cancelHandler();
                }
            };

            confirmBtn.addEventListener('click', confirmHandler);
            cancelBtn.addEventListener('click', cancelHandler);
            modal.addEventListener('click', outsideClickHandler);
        }

        // ====== FUNCIÓN: MOSTRAR NOTIFICACIONES TOAST ======
        function showNotification(type, message) {
            const existing = document.querySelectorAll('.notification-toast');
            existing.forEach(n => n.remove());

            const notification = document.createElement('div');
            notification.className = `notification-toast notification-${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <span class="notification-icon">${type === 'success' ? '✓' : '✕'}</span>
                    <span class="notification-message">${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => notification.classList.add('show'), 10);

            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // ====== CARGAR BADGE DEL CARRITO AL INICIAR ======
        async function cargarBadgeCarrito() {
            try {
                const response = await fetch('/Cart/GetCartCount');
                const result = await response.json();
                actualizarBadgeGlobal(result.count);
            } catch (error) {
                console.error('Error al cargar badge del carrito:', error);
            }
        }

        // Ejecutar al cargar la página
        document.addEventListener('DOMContentLoaded', cargarBadgeCarrito);
    </script>
}